@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@namespace VandaliaCentral.Components.Layout
@using VandaliaCentral.Services
@inject PdfService PdfService



<div>
    <!-- Top Navbar -->
    <nav class="navbar navbar-expand-lg navbar-dark fixed-top bg-vandalia-secondary px-4">
        <a class="navbar-brand" href="https://vandaliarental.com/" target="_blank">
            <img src=".\VR_black.png" width="151" height="47" class="align-top mb-2 mt-1" />
        </a>
        <div class="container-fluid justify-content-end gap-3">
            
            @if (!string.IsNullOrEmpty(uploadStatus))
            {
                <div class="btn-success rounded px-2 py-1" >
                    @uploadStatus
                </div>
            }
            <label class="btn btn-primary mmbtn custom-upload-button ml-4">
                Upload Monday Minute
                <InputFile OnChange="HandleFileUpload" accept=".pdf" class="d-none" />
            </label>
            

        </div>


    </nav>

    <!-- Main Content Area -->
    <div class="main-content-wrapper container-fluid">
        <!-- Sidebar -->
        <div class="vandalia-sidebar">
            <NavMenu></NavMenu>
        </div>

        <!-- Content -->
        <div class="main-content" style="background: #F5F5F5;">
            @Body
        </div>
    </div>
</div>

@code {
    private string? uploadStatus;
    private string? statusClass;

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file is null || !file.Name.EndsWith(".pdf"))
        {
            uploadStatus = "Please select a valid PDF file.";

            return;
        }

        try
        {
            await PdfService.UploadPdfAsync("mondayminute", file);
            uploadStatus = "Upload successful!";
           
            _ = Task.Run(async () =>
            {
                await Task.Delay(3000);
                uploadStatus = null;
                
                await InvokeAsync(StateHasChanged); // Tell Blazor to re-render
            });
            
        }
        catch (Exception ex)
        {
            uploadStatus = $"Upload failed: {ex.Message}";
        }

        
        






    }
    
    
}





