@page "/mondayminuteeditor"
@using VandaliaCentral.Services
@using Azure.Storage.Blobs
@using Azure.Storage.Blobs.Models
@inject PdfService PdfService

<div class="container-fluid d-flex flex-column border rounded bg-white shadow-sm col-md-12 py-4">
    <h3>Monday Minute File Manager</h3>

    @if (fileItems == null)
    {
        <p>Loading files...</p>
    }
    else if (fileItems.Count == 0)
    {
        <p>No PDF files found in the container.</p>
    }
    else
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>File Name</th>
                    <th>Date Uploaded</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var file in fileItems)
                {
                    <tr>
                        <td>@file.Blob.Name</td>
                        <td>@(file.Blob.Properties.LastModified?.UtcDateTime.ToString("g") ?? "Unknown")</td>
                        <td>
                            <a class="btn btn-sm btn-primary"
                               href="@file.Url" target="_blank">Open</a>
                            <button class="btn btn-sm btn-danger"
                                    @onclick="() => DeleteFile(file.Blob.Name)">
                                Delete
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {
    private class FileItem
    {
        public BlobItem Blob { get; set; } = default!;
        public string Url { get; set; } = string.Empty;
    }

    private List<FileItem>? fileItems;

    protected override async Task OnInitializedAsync()
    {
        await LoadFilesAsync();
    }

    private async Task LoadFilesAsync()
    {
        var containerClient = PdfService.GetBlobContainerClient("mondayminute");

        var blobs = new List<BlobItem>();

        await foreach (var blobItem in containerClient.GetBlobsAsync())
        {
            if (blobItem.Name.EndsWith(".pdf", StringComparison.OrdinalIgnoreCase))
            {
                blobs.Add(blobItem);
            }
        }

        fileItems = blobs
            .OrderByDescending(b => b.Properties.LastModified ?? DateTimeOffset.MinValue)
            .Select(blob => new FileItem
                {
                    Blob = blob,
                    Url = containerClient.GetBlobClient(blob.Name).Uri.ToString()
                })
            .ToList();
    }

    private async Task DeleteFile(string blobName)
    {
        await PdfService.DeleteBlobAsync("mondayminute", blobName);
        await LoadFilesAsync();
        StateHasChanged();
    }
}