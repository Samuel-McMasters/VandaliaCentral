@page "/admin"
@using VandaliaCentral.Services
@using VandaliaCentral.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.Identity.Client
@using Microsoft.Identity.Web
@inject CalendarService CalendarService
@inject LoggingService Logger
@inject GraphUserService GraphUserService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation
@inject ITokenAcquisition TokenAcquisition

<div class="container-fluid border rounded bg-white shadow-sm col-md-12 py-4">
    <h3>Admin Dashboard</h3>

    @if (!isAuthorized)
    {
        <p class="text-danger">You are not authorized to view this page.</p>
    }
    else
    {
        <div class="py-3">
            <button class="btn btn-primary mmbtn custom-upload-button text-nowrap"
                    style="max-width: 200px;"
                    @onclick="NavigateToEditor">
                Monday Minute Editor
            </button>
        </div>

        <!-- Tab Navigation -->
        <ul class="nav nav-tabs mb-4" id="adminTabs" role="tablist">
            <li class="nav-item" role="presentation">
                <button class='nav-link @(IsActiveTab("logs"))'
                        @onclick='() => SetActiveTab("logs")'
                        type='button'>
                    Logs
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class='nav-link @(IsActiveTab("calendar"))'
                        @onclick='() => SetActiveTab("calendar")'
                        type='button'>
                    Company Calendar
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class='nav-link @(IsActiveTab("mondayminute"))'
                        @onclick='() => SetActiveTab("mondayminute")'
                        type='button'>
                    Monday Minute
                </button>
            </li>
        </ul>

        <!-- Logs Tab -->
        @if (activeTab == "logs")
        {
            <div>
                <h5>Log Viewer</h5>

                @if (logFiles == null)
                {
                    <p>Loading logs...</p>
                }
                else
                {
                    <select @onchange="OnLogSelected" class="form-select w-100 mb-3">
                        <option disabled selected value="">-- Select Log File --</option>
                        @foreach (var file in logFiles)
                        {
                            <option value="@file">@file</option>
                        }
                    </select>

                    @if (!string.IsNullOrEmpty(logContent))
                    {
                        <div style="max-height: 400px; overflow-y: auto;">
                            <pre class="bg-light p-3 border rounded" style="white-space: pre-wrap;">@logContent</pre>
                        </div>
                    }
                }
            </div>
        }

        <!-- Calendar Tab -->
        @if (activeTab == "calendar")
        {
            <div>
                <h5>Company Calendar Manager</h5>

                <div class="mb-3">
                    <label>Date:</label>
                    <InputDate @bind-Value="newEvent.Date" class="form-control" />

                    <label class="mt-2">Title:</label>
                    <InputText @bind-Value="newEvent.Title" class="form-control" />

                    <label class="mt-2">Type:</label>
                    <InputText @bind-Value="newEvent.Type" class="form-control" />

                    <button class="btn btn-success mt-3" @onclick="AddEvent">Add Event</button>
                </div>

                @if (calendarEvents == null)
                {
                    <p>Loading calendar events...</p>
                }
                else if (!calendarEvents.Any())
                {
                    <p class="text-muted">No events yet.</p>
                }
                else
                {
                    <ul class="list-group">
                        @foreach (var ev in calendarEvents)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <div>
                                    <strong>@ev.Date.ToString("MMMM d")</strong> – @ev.Title
                                    <div class="text-muted small">@ev.Type</div>
                                </div>
                                <button class="btn btn-sm btn-danger" @onclick="() => DeleteEvent(ev)">Delete</button>
                            </li>
                        }
                    </ul>

                    <div class="d-flex align-items-center gap-3 mt-3">
                        <button class="btn btn-primary" @onclick="SaveCalendar">Save Changes</button>
                        @if (showSaveSuccess)
                        {
                            <div class="text-success fw-bold">✓ Saved!</div>
                        }
                    </div>
                }
            </div>
        }


        <!-- Monday Minute Editor Tab -->
        @if (activeTab == "mondayminute")
        {
            <MondayMinuteManager />
        }
    }
</div>

@code {
    private List<string>? logFiles;

    private string? logContent;
    private bool isAuthorized = false;
    private bool showSaveSuccess = false;
    private string activeTab = "logs";
    private string adminGroupId = "1f7897c7-a5b7-437c-9697-626c1e758f04";
    private List<CalendarEvent>? calendarEvents;
    private CalendarEvent newEvent = new();

    private void SetActiveTab(string tab) => activeTab = tab;

    private string IsActiveTab(string tab) => activeTab == tab ? "active" : "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var token = await TokenAcquisition.GetAccessTokenForUserAsync(new[] { "User.Read.All" });

            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated == true)
            {
                var userId = user.FindFirst("http://schemas.microsoft.com/identity/claims/objectidentifier")?.Value;

                if (!string.IsNullOrEmpty(userId))
                {
                    isAuthorized = await GraphUserService.IsUserInGroupAsync(userId, adminGroupId);
                }
            }

            if (isAuthorized)
            {
                logFiles = await Logger.GetLogFileNamesAsync();
                calendarEvents = await CalendarService.LoadCalendarAsync();
            }
        }
        catch (MsalUiRequiredException)
        {
            Navigation.NavigateTo("MicrosoftIdentity/Account/SignIn", forceLoad: true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Unexpected error during token acquisition or group check: {ex.Message}");
        }
    }

    private async Task OnLogSelected(ChangeEventArgs e)
    {
        var selectedFile = e.Value?.ToString();
        if (!string.IsNullOrEmpty(selectedFile))
        {
            logContent = await Logger.ReadLogContentAsync(selectedFile);
        }
    }

    private void NavigateToEditor()
    {
        Navigation.NavigateTo("/mondayminuteeditor");
    }

    private void AddEvent()
    {
        if (string.IsNullOrWhiteSpace(newEvent.Title))
            return;

        calendarEvents?.Add(new CalendarEvent
            {
                Date = newEvent.Date,
                Title = newEvent.Title,
                Type = newEvent.Type
            });

        newEvent = new CalendarEvent(); // clear form
    }

    private void DeleteEvent(CalendarEvent ev)
    {
        calendarEvents?.Remove(ev);
    }

    private async Task SaveCalendar()
    {
        try
        {
            if (calendarEvents != null)
            {
                await CalendarService.SaveCalendarAsync(calendarEvents);
                showSaveSuccess = true;
                StateHasChanged();

                await Task.Delay(4000);
                showSaveSuccess = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error saving calendar: " + ex.Message);
        }
    }
}