@page "/employeechange"
@using VandaliaCentral.Models
@using VandaliaCentral.Services
@using Microsoft.Identity.Web
@using Microsoft.AspNetCore.Authorization
@inject GraphEmailService EmailService
@inject LoggingService Logger
@inject Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider AuthStateProvider

@attribute [Authorize]
@attribute [AuthorizeForScopes(Scopes = new[] { "User.Read.All", "Mail.Send" })]

<div class="container d-flex flex-column border rounded bg-white shadow-sm col-md-7 py-4">
    <h3>Employee Change Form</h3>
    @if (success)
    {
        <p class="text-success mt-2">Form submission was successful!</p>
        <p class="text-success mt-2">Redirecting to home page...</p>
    }
    else if (failure)
    {
        <h4 class="text-danger mt-2">There was an error submitting your employee change form:</h4>
        <p>Please refresh the webpage, or contact the intranet administrator for assistance.</p>
    }
    else if (!isAuthorized)
    {
        <p>Checking sign-in status...</p>
    }
    else
    {
        <EditForm Model="@formModel" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <!-- Employee Information Block -->
            <div class="row py-5">
                <div class="row">
                    <div class="col-12 col-md-6 d-flex flex-column mb-2">
                        <label><strong>First Name:</strong></label>
                        <InputText @bind-Value="formModel.FirstName" class="form-control" />
                    </div>
                    <div class="col-12 col-md-6 mb-2">
                        <label><strong>Last Name:</strong></label>
                        <InputText @bind-Value="formModel.LastName" class="form-control" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-12 col-md-12 mb-2">
                        <label><strong>Previous Job Title:</strong></label>
                        <p>(i.e. Inside Sales, Rental Coordinator, Mechanic, Road Tech, etc.)</p>
                        <InputText @bind-Value="formModel.PreviousJobTitle" class="form-control" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-12 col-md-6 mb-2">
                        <label><strong>Branch #:</strong></label>
                        <InputText @bind-Value="formModel.BranchNumber" class="form-control" />
                    </div>
                    <div class="col-12 col-md-6 mb-2">
                        <label><strong>Branch Name:</strong></label>
                        <InputText @bind-Value="formModel.BranchName" class="form-control" />
                    </div>
                    <div class="col-12 col-md-6 mb-2">
                        <label><strong>Manager Name:</strong></label>
                        <InputText @bind-Value="formModel.ManagerName" class="form-control" />
                    </div>
                </div>
            </div>

            <!-- Change Employee Position To Block -->
            <div class="row py-5">
                <h5 class="pb-3">Change Employee Position To</h5>
                <div class="row">
                    <div class="col-12 col-md-3 d-flex flex-column mb-2">
                        <label><strong>Effective Date:</strong></label>
                        <InputDate @bind-Value="formModel.EffectiveDate" class="form-control" />
                    </div>
                    <div class="col-12 col-md-9 mb-2">
                        <label><strong>New Position:</strong></label>
                        <InputText @bind-Value="formModel.NewPosition" class="form-control" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-12 col-md-12 mb-2">
                        <label><strong>Job Title:</strong></label>
                        <InputText @bind-Value="formModel.JobTitle" class="form-control" />
                    </div>
                </div>
                <div class="row pt-4">
                    <div class="col-12 col-md-2 mb-2">
                        <InputCheckbox @bind-Value="formModel.FullTime" class="form-check-input" />
                        <label class="form-check-label">Full Time</label>
                    </div>
                    <div class="col-12 col-md-2 mb-2">
                        <InputCheckbox @bind-Value="formModel.PartTime" class="form-check-input" />
                        <label class="form-check-label">Part Time</label>
                    </div>
                    <div class="col-12 col-md-2 mb-2">
                        <InputCheckbox @bind-Value="formModel.Hourly" class="form-check-input" />
                        <label class="form-check-label">Hourly</label>
                    </div>
                    <div class="col-12 col-md-2 mb-2">
                        <InputCheckbox @bind-Value="formModel.Salary" class="form-check-input" />
                        <label class="form-check-label">Salary</label>
                    </div>
                </div>
            </div>

            <!-- Change Employee Branch Location To Block -->
            <div class="row py-5">
                <h5 class="pt-3">Change Employee Branch Location To</h5>
                <p class="pb-3">(If No Branch Change DO NOT Complete)</p>
                <div class="row">
                    <div class="col-12 col-md-6 d-flex flex-column mb-2">
                        <label><strong>Branch Number:</strong></label>
                        <InputText @bind-Value="formModel.NewLocBranchNumber" class="form-control" />
                    </div>
                    <div class="col-12 col-md-6 mb-2">
                        <label><strong>Branch Name:</strong></label>
                        <InputText @bind-Value="formModel.NewLocBranchName" class="form-control" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-12 col-md-6 mb-2">
                        <label><strong>Manager Name:</strong></label>
                        <InputText @bind-Value="formModel.NewLocManagerName" class="form-control" />
                    </div>
                </div>
                <div class="row pt-4">
                    <div class="col-12 col-md-6 mb-2">
                        <label class="form-check-label pb-1">Additional Notes</label>
                        <InputTextArea @bind-Value="formModel.AdditionalNotes"
                                       class="form-control"
                                       rows="5"
                                       style="resize: none;" />
                    </div>
                </div>
            </div>

            <button type="submit" class="btn btn-primary mt-2">Submit</button>
        </EditForm>
    }
</div>

@code {
    private ChangeFormModel formModel = new();
    private bool success = false;
    private bool failure = false;
    private bool isAuthorized = false;

    [Inject] private NavigationManager Navigation { get; set; } = default!;
    [Inject] private ITokenAcquisition TokenAcquisition { get; set; } = default!;
    [Inject] private MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var token = await TokenAcquisition.GetAccessTokenForUserAsync(new[] { "Mail.Send" });
            isAuthorized = true;
        }
        catch (Exception ex)
        {
            ConsentHandler.HandleException(ex);
        }
    }

    private async Task HandleValidSubmit()
    {
        var fullName = $"{formModel.FirstName} {formModel.LastName}";

        try
        {
            var pdfBytes = PDFTemplateFiller.FillChange(formModel);

            await EmailService.SendEmailWithAttachmentAsync(
                toEmail: "sam.mcmasters@vandaliarental.com", // TODO: change this email
                subject: $"Employee Change Form: {fullName}",
                bodyText: $"Attached is the Employee Change form for {fullName}.",
                pdfBytes: pdfBytes,
                pdfFileName: $"{fullName}_change.pdf"
            );

            // Get current user identity
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var userName = authState.User?.Identity?.Name ?? "anonymous";

            // Log the activity
            var activity = $"Submitted Employee Change Form For: '{fullName}'";
            await Logger.LogActivityAsync(userName, activity);



            success = true;
            StateHasChanged();
            await Task.Delay(4000);
            Navigation.NavigateTo("/");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"PDF or Email Error: {ex.Message}");

            if (ex.InnerException != null)
                Console.WriteLine($"Inner Exception: {ex.InnerException.Message}");

            failure = true;
        }
    }
}