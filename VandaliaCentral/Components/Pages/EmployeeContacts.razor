@page "/employeecontacts"
@using Microsoft.Graph
@using Microsoft.Identity.Web
@inject Microsoft.Graph.GraphServiceClient GraphClient
@attribute [AuthorizeForScopes(Scopes = new[] { "User.Read.All", "Mail.Send" })]

<div class="container d-flex flex-column border rounded bg-white shadow-sm col-md-12 py-4">
	<h3>Employee Contacts</h3>
	<input type="text" class="form-control mb-3" placeholder="Search by name or email..."
		   @bind="searchTerm" @bind:event="oninput" />
	<div>
		@if (employees == null)
		{
			<p>Loading contacts...</p>
		}
		else
		{
			<table class ="table table-striped">
				<thread>
					<tr>
						<th>Name</th>
						<th>Job Title</th>
						<th>Email</th>
						<th>Mobile Phone</th>
					</tr>
					<tbody>
						@foreach (var user in FilteredEmployees)
						{
							<tr>
								<td>@user.DisplayName</td>
								<td>@user.JobTitle</td>
								<td>@user.Mail</td>
								<td>@user.MobilePhone</td>
								
							</tr>
						}
					</tbody>
				</thread>
			</table>
		}

	</div>

</div>


@code {
	private List<User> employees;
	private string searchTerm = "";

	protected override async Task OnInitializedAsync()
	{
		var allUsers = new List<User>();
		try
		{
			var page = await GraphClient.Users
				.Request()
				.Select(u => new { u.DisplayName, u.Mail, u.JobTitle, u.MobilePhone })
				.Top(100)
				.GetAsync();

			while (page != null)
			{
				allUsers.AddRange(page.CurrentPage);

				if (page.NextPageRequest != null)
				{
					page = await page.NextPageRequest.GetAsync();
				}
				else
				{
					break;
				}
			}

			employees = allUsers;
		}
		catch (ServiceException ex)
		{
			Console.WriteLine($"Error fetching users: {ex.Message}");
			Console.WriteLine($"Error code: {ex.Error.Code}");
			Console.WriteLine($"Error details: {ex.Error.Message}");
		}


	}
	private IEnumerable<User> FilteredEmployees =>
	string.IsNullOrWhiteSpace(searchTerm)
		? employees
		: employees.Where(u =>
			(!string.IsNullOrWhiteSpace(u.DisplayName) && u.DisplayName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
			(!string.IsNullOrWhiteSpace(u.Mail) && u.Mail.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
		);
}
